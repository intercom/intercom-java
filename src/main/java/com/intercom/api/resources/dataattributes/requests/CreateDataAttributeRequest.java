/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.resources.dataattributes.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateDataAttributeRequest.Builder.class)
public final class CreateDataAttributeRequest {
    private final String name;

    private final Model model;

    private final DataType dataType;

    private final Optional<String> description;

    private final Optional<List<String>> options;

    private final Optional<Boolean> messengerWritable;

    private final Map<String, Object> additionalProperties;

    private CreateDataAttributeRequest(
            String name,
            Model model,
            DataType dataType,
            Optional<String> description,
            Optional<List<String>> options,
            Optional<Boolean> messengerWritable,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.model = model;
        this.dataType = dataType;
        this.description = description;
        this.options = options;
        this.messengerWritable = messengerWritable;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the data attribute.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The model that the data attribute belongs to.
     */
    @JsonProperty("model")
    public Model getModel() {
        return model;
    }

    /**
     * @return The type of data stored for this attribute.
     */
    @JsonProperty("data_type")
    public DataType getDataType() {
        return dataType;
    }

    /**
     * @return The readable description you see in the UI for the attribute.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return To create list attributes. Provide a set of hashes with <code>value</code> as the key of the options you want to make. <code>data_type</code> must be <code>string</code>.
     */
    @JsonProperty("options")
    public Optional<List<String>> getOptions() {
        return options;
    }

    /**
     * @return Can this attribute be updated by the Messenger
     */
    @JsonProperty("messenger_writable")
    public Optional<Boolean> getMessengerWritable() {
        return messengerWritable;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateDataAttributeRequest && equalTo((CreateDataAttributeRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateDataAttributeRequest other) {
        return name.equals(other.name)
                && model.equals(other.model)
                && dataType.equals(other.dataType)
                && description.equals(other.description)
                && options.equals(other.options)
                && messengerWritable.equals(other.messengerWritable);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name, this.model, this.dataType, this.description, this.options, this.messengerWritable);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        ModelStage name(@NotNull String name);

        Builder from(CreateDataAttributeRequest other);
    }

    public interface ModelStage {
        DataTypeStage model(@NotNull Model model);
    }

    public interface DataTypeStage {
        _FinalStage dataType(@NotNull DataType dataType);
    }

    public interface _FinalStage {
        CreateDataAttributeRequest build();

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage options(Optional<List<String>> options);

        _FinalStage options(List<String> options);

        _FinalStage messengerWritable(Optional<Boolean> messengerWritable);

        _FinalStage messengerWritable(Boolean messengerWritable);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, ModelStage, DataTypeStage, _FinalStage {
        private String name;

        private Model model;

        private DataType dataType;

        private Optional<Boolean> messengerWritable = Optional.empty();

        private Optional<List<String>> options = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateDataAttributeRequest other) {
            name(other.getName());
            model(other.getModel());
            dataType(other.getDataType());
            description(other.getDescription());
            options(other.getOptions());
            messengerWritable(other.getMessengerWritable());
            return this;
        }

        /**
         * <p>The name of the data attribute.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public ModelStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The model that the data attribute belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("model")
        public DataTypeStage model(@NotNull Model model) {
            this.model = Objects.requireNonNull(model, "model must not be null");
            return this;
        }

        /**
         * <p>The type of data stored for this attribute.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("data_type")
        public _FinalStage dataType(@NotNull DataType dataType) {
            this.dataType = Objects.requireNonNull(dataType, "dataType must not be null");
            return this;
        }

        /**
         * <p>Can this attribute be updated by the Messenger</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messengerWritable(Boolean messengerWritable) {
            this.messengerWritable = Optional.ofNullable(messengerWritable);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "messenger_writable", nulls = Nulls.SKIP)
        public _FinalStage messengerWritable(Optional<Boolean> messengerWritable) {
            this.messengerWritable = messengerWritable;
            return this;
        }

        /**
         * <p>To create list attributes. Provide a set of hashes with <code>value</code> as the key of the options you want to make. <code>data_type</code> must be <code>string</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage options(List<String> options) {
            this.options = Optional.ofNullable(options);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "options", nulls = Nulls.SKIP)
        public _FinalStage options(Optional<List<String>> options) {
            this.options = options;
            return this;
        }

        /**
         * <p>The readable description you see in the UI for the attribute.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public CreateDataAttributeRequest build() {
            return new CreateDataAttributeRequest(
                    name, model, dataType, description, options, messengerWritable, additionalProperties);
        }
    }

    public enum Model {
        CONTACT("contact"),

        COMPANY("company");

        private final String value;

        Model(String value) {
            this.value = value;
        }

        @JsonValue
        @java.lang.Override
        public String toString() {
            return this.value;
        }
    }

    public enum DataType {
        STRING("string"),

        INTEGER("integer"),

        FLOAT("float"),

        BOOLEAN("boolean"),

        DATETIME("datetime"),

        DATE("date");

        private final String value;

        DataType(String value) {
            this.value = value;
        }

        @JsonValue
        @java.lang.Override
        public String toString() {
            return this.value;
        }
    }
}
