/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.resources.notes.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListContactNotesRequest.Builder.class)
public final class ListContactNotesRequest {
    private final String contactId;

    private final Optional<Integer> page;

    private final Optional<Integer> perPage;

    private final Map<String, Object> additionalProperties;

    private ListContactNotesRequest(
            String contactId,
            Optional<Integer> page,
            Optional<Integer> perPage,
            Map<String, Object> additionalProperties) {
        this.contactId = contactId;
        this.page = page;
        this.perPage = perPage;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique identifier of a contact.
     */
    @JsonProperty("contact_id")
    public String getContactId() {
        return contactId;
    }

    /**
     * @return The page of results to fetch. Defaults to first page
     */
    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    /**
     * @return How many results to display per page. Defaults to 15
     */
    @JsonProperty("per_page")
    public Optional<Integer> getPerPage() {
        return perPage;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListContactNotesRequest && equalTo((ListContactNotesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListContactNotesRequest other) {
        return contactId.equals(other.contactId) && page.equals(other.page) && perPage.equals(other.perPage);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.contactId, this.page, this.perPage);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ContactIdStage builder() {
        return new Builder();
    }

    public interface ContactIdStage {
        _FinalStage contactId(@NotNull String contactId);

        Builder from(ListContactNotesRequest other);
    }

    public interface _FinalStage {
        ListContactNotesRequest build();

        _FinalStage page(Optional<Integer> page);

        _FinalStage page(Integer page);

        _FinalStage perPage(Optional<Integer> perPage);

        _FinalStage perPage(Integer perPage);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ContactIdStage, _FinalStage {
        private String contactId;

        private Optional<Integer> perPage = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ListContactNotesRequest other) {
            contactId(other.getContactId());
            page(other.getPage());
            perPage(other.getPerPage());
            return this;
        }

        /**
         * <p>The unique identifier of a contact.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("contact_id")
        public _FinalStage contactId(@NotNull String contactId) {
            this.contactId = Objects.requireNonNull(contactId, "contactId must not be null");
            return this;
        }

        /**
         * <p>How many results to display per page. Defaults to 15</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage perPage(Integer perPage) {
            this.perPage = Optional.ofNullable(perPage);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "per_page", nulls = Nulls.SKIP)
        public _FinalStage perPage(Optional<Integer> perPage) {
            this.perPage = perPage;
            return this;
        }

        /**
         * <p>The page of results to fetch. Defaults to first page</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public _FinalStage page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        @java.lang.Override
        public ListContactNotesRequest build() {
            return new ListContactNotesRequest(contactId, page, perPage, additionalProperties);
        }
    }
}
