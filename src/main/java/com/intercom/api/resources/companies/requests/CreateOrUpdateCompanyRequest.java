/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.resources.companies.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateOrUpdateCompanyRequest.Builder.class)
public final class CreateOrUpdateCompanyRequest {
    private final Optional<String> name;

    private final Optional<String> companyId;

    private final Optional<String> plan;

    private final Optional<Integer> size;

    private final Optional<String> website;

    private final Optional<String> industry;

    private final Optional<Map<String, Object>> customAttributes;

    private final Optional<Integer> remoteCreatedAt;

    private final Optional<Integer> monthlySpend;

    private final Map<String, Object> additionalProperties;

    private CreateOrUpdateCompanyRequest(
            Optional<String> name,
            Optional<String> companyId,
            Optional<String> plan,
            Optional<Integer> size,
            Optional<String> website,
            Optional<String> industry,
            Optional<Map<String, Object>> customAttributes,
            Optional<Integer> remoteCreatedAt,
            Optional<Integer> monthlySpend,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.companyId = companyId;
        this.plan = plan;
        this.size = size;
        this.website = website;
        this.industry = industry;
        this.customAttributes = customAttributes;
        this.remoteCreatedAt = remoteCreatedAt;
        this.monthlySpend = monthlySpend;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the Company
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The company id you have defined for the company. Can't be updated
     */
    @JsonProperty("company_id")
    public Optional<String> getCompanyId() {
        return companyId;
    }

    /**
     * @return The name of the plan you have associated with the company.
     */
    @JsonProperty("plan")
    public Optional<String> getPlan() {
        return plan;
    }

    /**
     * @return The number of employees in this company.
     */
    @JsonProperty("size")
    public Optional<Integer> getSize() {
        return size;
    }

    /**
     * @return The URL for this company's website. Please note that the value specified here is not validated. Accepts any string.
     */
    @JsonProperty("website")
    public Optional<String> getWebsite() {
        return website;
    }

    /**
     * @return The industry that this company operates in.
     */
    @JsonProperty("industry")
    public Optional<String> getIndustry() {
        return industry;
    }

    /**
     * @return A hash of key/value pairs containing any other data about the company you want Intercom to store.
     */
    @JsonProperty("custom_attributes")
    public Optional<Map<String, Object>> getCustomAttributes() {
        return customAttributes;
    }

    /**
     * @return The time the company was created by you.
     */
    @JsonProperty("remote_created_at")
    public Optional<Integer> getRemoteCreatedAt() {
        return remoteCreatedAt;
    }

    /**
     * @return How much revenue the company generates for your business. Note that this will truncate floats. i.e. it only allow for whole integers, 155.98 will be truncated to 155. Note that this has an upper limit of 2**31-1 or 2147483647..
     */
    @JsonProperty("monthly_spend")
    public Optional<Integer> getMonthlySpend() {
        return monthlySpend;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateOrUpdateCompanyRequest && equalTo((CreateOrUpdateCompanyRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateOrUpdateCompanyRequest other) {
        return name.equals(other.name)
                && companyId.equals(other.companyId)
                && plan.equals(other.plan)
                && size.equals(other.size)
                && website.equals(other.website)
                && industry.equals(other.industry)
                && customAttributes.equals(other.customAttributes)
                && remoteCreatedAt.equals(other.remoteCreatedAt)
                && monthlySpend.equals(other.monthlySpend);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.companyId,
                this.plan,
                this.size,
                this.website,
                this.industry,
                this.customAttributes,
                this.remoteCreatedAt,
                this.monthlySpend);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> companyId = Optional.empty();

        private Optional<String> plan = Optional.empty();

        private Optional<Integer> size = Optional.empty();

        private Optional<String> website = Optional.empty();

        private Optional<String> industry = Optional.empty();

        private Optional<Map<String, Object>> customAttributes = Optional.empty();

        private Optional<Integer> remoteCreatedAt = Optional.empty();

        private Optional<Integer> monthlySpend = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateOrUpdateCompanyRequest other) {
            name(other.getName());
            companyId(other.getCompanyId());
            plan(other.getPlan());
            size(other.getSize());
            website(other.getWebsite());
            industry(other.getIndustry());
            customAttributes(other.getCustomAttributes());
            remoteCreatedAt(other.getRemoteCreatedAt());
            monthlySpend(other.getMonthlySpend());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "company_id", nulls = Nulls.SKIP)
        public Builder companyId(Optional<String> companyId) {
            this.companyId = companyId;
            return this;
        }

        public Builder companyId(String companyId) {
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }

        @JsonSetter(value = "plan", nulls = Nulls.SKIP)
        public Builder plan(Optional<String> plan) {
            this.plan = plan;
            return this;
        }

        public Builder plan(String plan) {
            this.plan = Optional.ofNullable(plan);
            return this;
        }

        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public Builder size(Optional<Integer> size) {
            this.size = size;
            return this;
        }

        public Builder size(Integer size) {
            this.size = Optional.ofNullable(size);
            return this;
        }

        @JsonSetter(value = "website", nulls = Nulls.SKIP)
        public Builder website(Optional<String> website) {
            this.website = website;
            return this;
        }

        public Builder website(String website) {
            this.website = Optional.ofNullable(website);
            return this;
        }

        @JsonSetter(value = "industry", nulls = Nulls.SKIP)
        public Builder industry(Optional<String> industry) {
            this.industry = industry;
            return this;
        }

        public Builder industry(String industry) {
            this.industry = Optional.ofNullable(industry);
            return this;
        }

        @JsonSetter(value = "custom_attributes", nulls = Nulls.SKIP)
        public Builder customAttributes(Optional<Map<String, Object>> customAttributes) {
            this.customAttributes = customAttributes;
            return this;
        }

        public Builder customAttributes(Map<String, Object> customAttributes) {
            this.customAttributes = Optional.ofNullable(customAttributes);
            return this;
        }

        @JsonSetter(value = "remote_created_at", nulls = Nulls.SKIP)
        public Builder remoteCreatedAt(Optional<Integer> remoteCreatedAt) {
            this.remoteCreatedAt = remoteCreatedAt;
            return this;
        }

        public Builder remoteCreatedAt(Integer remoteCreatedAt) {
            this.remoteCreatedAt = Optional.ofNullable(remoteCreatedAt);
            return this;
        }

        @JsonSetter(value = "monthly_spend", nulls = Nulls.SKIP)
        public Builder monthlySpend(Optional<Integer> monthlySpend) {
            this.monthlySpend = monthlySpend;
            return this;
        }

        public Builder monthlySpend(Integer monthlySpend) {
            this.monthlySpend = Optional.ofNullable(monthlySpend);
            return this;
        }

        public CreateOrUpdateCompanyRequest build() {
            return new CreateOrUpdateCompanyRequest(
                    name,
                    companyId,
                    plan,
                    size,
                    website,
                    industry,
                    customAttributes,
                    remoteCreatedAt,
                    monthlySpend,
                    additionalProperties);
        }
    }
}
