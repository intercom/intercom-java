/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.resources.unstable.tickets.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import com.intercom.api.resources.unstable.tickets.types.ReplyTicketRequestBody;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ReplyTicketRequest.Builder.class)
public final class ReplyTicketRequest {
    private final String id;

    private final ReplyTicketRequestBody body;

    private final Map<String, Object> additionalProperties;

    private ReplyTicketRequest(String id, ReplyTicketRequestBody body, Map<String, Object> additionalProperties) {
        this.id = id;
        this.body = body;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("body")
    public ReplyTicketRequestBody getBody() {
        return body;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ReplyTicketRequest && equalTo((ReplyTicketRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ReplyTicketRequest other) {
        return id.equals(other.id) && body.equals(other.body);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.body);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        BodyStage id(@NotNull String id);

        Builder from(ReplyTicketRequest other);
    }

    public interface BodyStage {
        _FinalStage body(@NotNull ReplyTicketRequestBody body);
    }

    public interface _FinalStage {
        ReplyTicketRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, BodyStage, _FinalStage {
        private String id;

        private ReplyTicketRequestBody body;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ReplyTicketRequest other) {
            id(other.getId());
            body(other.getBody());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public BodyStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("body")
        public _FinalStage body(@NotNull ReplyTicketRequestBody body) {
            this.body = Objects.requireNonNull(body, "body must not be null");
            return this;
        }

        @java.lang.Override
        public ReplyTicketRequest build() {
            return new ReplyTicketRequest(id, body, additionalProperties);
        }
    }
}
