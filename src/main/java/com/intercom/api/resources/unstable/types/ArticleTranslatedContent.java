/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.resources.unstable.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ArticleTranslatedContent.Builder.class)
public final class ArticleTranslatedContent {
    private final Optional<String> type;

    private final Optional<ArticleContent> ar;

    private final Optional<ArticleContent> bg;

    private final Optional<ArticleContent> bs;

    private final Optional<ArticleContent> ca;

    private final Optional<ArticleContent> cs;

    private final Optional<ArticleContent> da;

    private final Optional<ArticleContent> de;

    private final Optional<ArticleContent> el;

    private final Optional<ArticleContent> en;

    private final Optional<ArticleContent> es;

    private final Optional<ArticleContent> et;

    private final Optional<ArticleContent> fi;

    private final Optional<ArticleContent> fr;

    private final Optional<ArticleContent> he;

    private final Optional<ArticleContent> hr;

    private final Optional<ArticleContent> hu;

    private final Optional<ArticleContent> id;

    private final Optional<ArticleContent> it;

    private final Optional<ArticleContent> ja;

    private final Optional<ArticleContent> ko;

    private final Optional<ArticleContent> lt;

    private final Optional<ArticleContent> lv;

    private final Optional<ArticleContent> mn;

    private final Optional<ArticleContent> nb;

    private final Optional<ArticleContent> nl;

    private final Optional<ArticleContent> pl;

    private final Optional<ArticleContent> pt;

    private final Optional<ArticleContent> ro;

    private final Optional<ArticleContent> ru;

    private final Optional<ArticleContent> sl;

    private final Optional<ArticleContent> sr;

    private final Optional<ArticleContent> sv;

    private final Optional<ArticleContent> tr;

    private final Optional<ArticleContent> vi;

    private final Optional<ArticleContent> ptBr;

    private final Optional<ArticleContent> zhCn;

    private final Optional<ArticleContent> zhTw;

    private final Map<String, Object> additionalProperties;

    private ArticleTranslatedContent(
            Optional<String> type,
            Optional<ArticleContent> ar,
            Optional<ArticleContent> bg,
            Optional<ArticleContent> bs,
            Optional<ArticleContent> ca,
            Optional<ArticleContent> cs,
            Optional<ArticleContent> da,
            Optional<ArticleContent> de,
            Optional<ArticleContent> el,
            Optional<ArticleContent> en,
            Optional<ArticleContent> es,
            Optional<ArticleContent> et,
            Optional<ArticleContent> fi,
            Optional<ArticleContent> fr,
            Optional<ArticleContent> he,
            Optional<ArticleContent> hr,
            Optional<ArticleContent> hu,
            Optional<ArticleContent> id,
            Optional<ArticleContent> it,
            Optional<ArticleContent> ja,
            Optional<ArticleContent> ko,
            Optional<ArticleContent> lt,
            Optional<ArticleContent> lv,
            Optional<ArticleContent> mn,
            Optional<ArticleContent> nb,
            Optional<ArticleContent> nl,
            Optional<ArticleContent> pl,
            Optional<ArticleContent> pt,
            Optional<ArticleContent> ro,
            Optional<ArticleContent> ru,
            Optional<ArticleContent> sl,
            Optional<ArticleContent> sr,
            Optional<ArticleContent> sv,
            Optional<ArticleContent> tr,
            Optional<ArticleContent> vi,
            Optional<ArticleContent> ptBr,
            Optional<ArticleContent> zhCn,
            Optional<ArticleContent> zhTw,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.ar = ar;
        this.bg = bg;
        this.bs = bs;
        this.ca = ca;
        this.cs = cs;
        this.da = da;
        this.de = de;
        this.el = el;
        this.en = en;
        this.es = es;
        this.et = et;
        this.fi = fi;
        this.fr = fr;
        this.he = he;
        this.hr = hr;
        this.hu = hu;
        this.id = id;
        this.it = it;
        this.ja = ja;
        this.ko = ko;
        this.lt = lt;
        this.lv = lv;
        this.mn = mn;
        this.nb = nb;
        this.nl = nl;
        this.pl = pl;
        this.pt = pt;
        this.ro = ro;
        this.ru = ru;
        this.sl = sl;
        this.sr = sr;
        this.sv = sv;
        this.tr = tr;
        this.vi = vi;
        this.ptBr = ptBr;
        this.zhCn = zhCn;
        this.zhTw = zhTw;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of object - article_translated_content.
     */
    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    /**
     * @return The content of the article in Arabic
     */
    @JsonProperty("ar")
    public Optional<ArticleContent> getAr() {
        return ar;
    }

    /**
     * @return The content of the article in Bulgarian
     */
    @JsonProperty("bg")
    public Optional<ArticleContent> getBg() {
        return bg;
    }

    /**
     * @return The content of the article in Bosnian
     */
    @JsonProperty("bs")
    public Optional<ArticleContent> getBs() {
        return bs;
    }

    /**
     * @return The content of the article in Catalan
     */
    @JsonProperty("ca")
    public Optional<ArticleContent> getCa() {
        return ca;
    }

    /**
     * @return The content of the article in Czech
     */
    @JsonProperty("cs")
    public Optional<ArticleContent> getCs() {
        return cs;
    }

    /**
     * @return The content of the article in Danish
     */
    @JsonProperty("da")
    public Optional<ArticleContent> getDa() {
        return da;
    }

    /**
     * @return The content of the article in German
     */
    @JsonProperty("de")
    public Optional<ArticleContent> getDe() {
        return de;
    }

    /**
     * @return The content of the article in Greek
     */
    @JsonProperty("el")
    public Optional<ArticleContent> getEl() {
        return el;
    }

    /**
     * @return The content of the article in English
     */
    @JsonProperty("en")
    public Optional<ArticleContent> getEn() {
        return en;
    }

    /**
     * @return The content of the article in Spanish
     */
    @JsonProperty("es")
    public Optional<ArticleContent> getEs() {
        return es;
    }

    /**
     * @return The content of the article in Estonian
     */
    @JsonProperty("et")
    public Optional<ArticleContent> getEt() {
        return et;
    }

    /**
     * @return The content of the article in Finnish
     */
    @JsonProperty("fi")
    public Optional<ArticleContent> getFi() {
        return fi;
    }

    /**
     * @return The content of the article in French
     */
    @JsonProperty("fr")
    public Optional<ArticleContent> getFr() {
        return fr;
    }

    /**
     * @return The content of the article in Hebrew
     */
    @JsonProperty("he")
    public Optional<ArticleContent> getHe() {
        return he;
    }

    /**
     * @return The content of the article in Croatian
     */
    @JsonProperty("hr")
    public Optional<ArticleContent> getHr() {
        return hr;
    }

    /**
     * @return The content of the article in Hungarian
     */
    @JsonProperty("hu")
    public Optional<ArticleContent> getHu() {
        return hu;
    }

    /**
     * @return The content of the article in Indonesian
     */
    @JsonProperty("id")
    public Optional<ArticleContent> getId() {
        return id;
    }

    /**
     * @return The content of the article in Italian
     */
    @JsonProperty("it")
    public Optional<ArticleContent> getIt() {
        return it;
    }

    /**
     * @return The content of the article in Japanese
     */
    @JsonProperty("ja")
    public Optional<ArticleContent> getJa() {
        return ja;
    }

    /**
     * @return The content of the article in Korean
     */
    @JsonProperty("ko")
    public Optional<ArticleContent> getKo() {
        return ko;
    }

    /**
     * @return The content of the article in Lithuanian
     */
    @JsonProperty("lt")
    public Optional<ArticleContent> getLt() {
        return lt;
    }

    /**
     * @return The content of the article in Latvian
     */
    @JsonProperty("lv")
    public Optional<ArticleContent> getLv() {
        return lv;
    }

    /**
     * @return The content of the article in Mongolian
     */
    @JsonProperty("mn")
    public Optional<ArticleContent> getMn() {
        return mn;
    }

    /**
     * @return The content of the article in Norwegian
     */
    @JsonProperty("nb")
    public Optional<ArticleContent> getNb() {
        return nb;
    }

    /**
     * @return The content of the article in Dutch
     */
    @JsonProperty("nl")
    public Optional<ArticleContent> getNl() {
        return nl;
    }

    /**
     * @return The content of the article in Polish
     */
    @JsonProperty("pl")
    public Optional<ArticleContent> getPl() {
        return pl;
    }

    /**
     * @return The content of the article in Portuguese (Portugal)
     */
    @JsonProperty("pt")
    public Optional<ArticleContent> getPt() {
        return pt;
    }

    /**
     * @return The content of the article in Romanian
     */
    @JsonProperty("ro")
    public Optional<ArticleContent> getRo() {
        return ro;
    }

    /**
     * @return The content of the article in Russian
     */
    @JsonProperty("ru")
    public Optional<ArticleContent> getRu() {
        return ru;
    }

    /**
     * @return The content of the article in Slovenian
     */
    @JsonProperty("sl")
    public Optional<ArticleContent> getSl() {
        return sl;
    }

    /**
     * @return The content of the article in Serbian
     */
    @JsonProperty("sr")
    public Optional<ArticleContent> getSr() {
        return sr;
    }

    /**
     * @return The content of the article in Swedish
     */
    @JsonProperty("sv")
    public Optional<ArticleContent> getSv() {
        return sv;
    }

    /**
     * @return The content of the article in Turkish
     */
    @JsonProperty("tr")
    public Optional<ArticleContent> getTr() {
        return tr;
    }

    /**
     * @return The content of the article in Vietnamese
     */
    @JsonProperty("vi")
    public Optional<ArticleContent> getVi() {
        return vi;
    }

    /**
     * @return The content of the article in Portuguese (Brazil)
     */
    @JsonProperty("pt-BR")
    public Optional<ArticleContent> getPtBr() {
        return ptBr;
    }

    /**
     * @return The content of the article in Chinese (China)
     */
    @JsonProperty("zh-CN")
    public Optional<ArticleContent> getZhCn() {
        return zhCn;
    }

    /**
     * @return The content of the article in Chinese (Taiwan)
     */
    @JsonProperty("zh-TW")
    public Optional<ArticleContent> getZhTw() {
        return zhTw;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ArticleTranslatedContent && equalTo((ArticleTranslatedContent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ArticleTranslatedContent other) {
        return type.equals(other.type)
                && ar.equals(other.ar)
                && bg.equals(other.bg)
                && bs.equals(other.bs)
                && ca.equals(other.ca)
                && cs.equals(other.cs)
                && da.equals(other.da)
                && de.equals(other.de)
                && el.equals(other.el)
                && en.equals(other.en)
                && es.equals(other.es)
                && et.equals(other.et)
                && fi.equals(other.fi)
                && fr.equals(other.fr)
                && he.equals(other.he)
                && hr.equals(other.hr)
                && hu.equals(other.hu)
                && id.equals(other.id)
                && it.equals(other.it)
                && ja.equals(other.ja)
                && ko.equals(other.ko)
                && lt.equals(other.lt)
                && lv.equals(other.lv)
                && mn.equals(other.mn)
                && nb.equals(other.nb)
                && nl.equals(other.nl)
                && pl.equals(other.pl)
                && pt.equals(other.pt)
                && ro.equals(other.ro)
                && ru.equals(other.ru)
                && sl.equals(other.sl)
                && sr.equals(other.sr)
                && sv.equals(other.sv)
                && tr.equals(other.tr)
                && vi.equals(other.vi)
                && ptBr.equals(other.ptBr)
                && zhCn.equals(other.zhCn)
                && zhTw.equals(other.zhTw);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type, this.ar, this.bg, this.bs, this.ca, this.cs, this.da, this.de, this.el, this.en, this.es,
                this.et, this.fi, this.fr, this.he, this.hr, this.hu, this.id, this.it, this.ja, this.ko, this.lt,
                this.lv, this.mn, this.nb, this.nl, this.pl, this.pt, this.ro, this.ru, this.sl, this.sr, this.sv,
                this.tr, this.vi, this.ptBr, this.zhCn, this.zhTw);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> type = Optional.empty();

        private Optional<ArticleContent> ar = Optional.empty();

        private Optional<ArticleContent> bg = Optional.empty();

        private Optional<ArticleContent> bs = Optional.empty();

        private Optional<ArticleContent> ca = Optional.empty();

        private Optional<ArticleContent> cs = Optional.empty();

        private Optional<ArticleContent> da = Optional.empty();

        private Optional<ArticleContent> de = Optional.empty();

        private Optional<ArticleContent> el = Optional.empty();

        private Optional<ArticleContent> en = Optional.empty();

        private Optional<ArticleContent> es = Optional.empty();

        private Optional<ArticleContent> et = Optional.empty();

        private Optional<ArticleContent> fi = Optional.empty();

        private Optional<ArticleContent> fr = Optional.empty();

        private Optional<ArticleContent> he = Optional.empty();

        private Optional<ArticleContent> hr = Optional.empty();

        private Optional<ArticleContent> hu = Optional.empty();

        private Optional<ArticleContent> id = Optional.empty();

        private Optional<ArticleContent> it = Optional.empty();

        private Optional<ArticleContent> ja = Optional.empty();

        private Optional<ArticleContent> ko = Optional.empty();

        private Optional<ArticleContent> lt = Optional.empty();

        private Optional<ArticleContent> lv = Optional.empty();

        private Optional<ArticleContent> mn = Optional.empty();

        private Optional<ArticleContent> nb = Optional.empty();

        private Optional<ArticleContent> nl = Optional.empty();

        private Optional<ArticleContent> pl = Optional.empty();

        private Optional<ArticleContent> pt = Optional.empty();

        private Optional<ArticleContent> ro = Optional.empty();

        private Optional<ArticleContent> ru = Optional.empty();

        private Optional<ArticleContent> sl = Optional.empty();

        private Optional<ArticleContent> sr = Optional.empty();

        private Optional<ArticleContent> sv = Optional.empty();

        private Optional<ArticleContent> tr = Optional.empty();

        private Optional<ArticleContent> vi = Optional.empty();

        private Optional<ArticleContent> ptBr = Optional.empty();

        private Optional<ArticleContent> zhCn = Optional.empty();

        private Optional<ArticleContent> zhTw = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ArticleTranslatedContent other) {
            type(other.getType());
            ar(other.getAr());
            bg(other.getBg());
            bs(other.getBs());
            ca(other.getCa());
            cs(other.getCs());
            da(other.getDa());
            de(other.getDe());
            el(other.getEl());
            en(other.getEn());
            es(other.getEs());
            et(other.getEt());
            fi(other.getFi());
            fr(other.getFr());
            he(other.getHe());
            hr(other.getHr());
            hu(other.getHu());
            id(other.getId());
            it(other.getIt());
            ja(other.getJa());
            ko(other.getKo());
            lt(other.getLt());
            lv(other.getLv());
            mn(other.getMn());
            nb(other.getNb());
            nl(other.getNl());
            pl(other.getPl());
            pt(other.getPt());
            ro(other.getRo());
            ru(other.getRu());
            sl(other.getSl());
            sr(other.getSr());
            sv(other.getSv());
            tr(other.getTr());
            vi(other.getVi());
            ptBr(other.getPtBr());
            zhCn(other.getZhCn());
            zhTw(other.getZhTw());
            return this;
        }

        /**
         * <p>The type of object - article_translated_content.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The content of the article in Arabic</p>
         */
        @JsonSetter(value = "ar", nulls = Nulls.SKIP)
        public Builder ar(Optional<ArticleContent> ar) {
            this.ar = ar;
            return this;
        }

        public Builder ar(ArticleContent ar) {
            this.ar = Optional.ofNullable(ar);
            return this;
        }

        /**
         * <p>The content of the article in Bulgarian</p>
         */
        @JsonSetter(value = "bg", nulls = Nulls.SKIP)
        public Builder bg(Optional<ArticleContent> bg) {
            this.bg = bg;
            return this;
        }

        public Builder bg(ArticleContent bg) {
            this.bg = Optional.ofNullable(bg);
            return this;
        }

        /**
         * <p>The content of the article in Bosnian</p>
         */
        @JsonSetter(value = "bs", nulls = Nulls.SKIP)
        public Builder bs(Optional<ArticleContent> bs) {
            this.bs = bs;
            return this;
        }

        public Builder bs(ArticleContent bs) {
            this.bs = Optional.ofNullable(bs);
            return this;
        }

        /**
         * <p>The content of the article in Catalan</p>
         */
        @JsonSetter(value = "ca", nulls = Nulls.SKIP)
        public Builder ca(Optional<ArticleContent> ca) {
            this.ca = ca;
            return this;
        }

        public Builder ca(ArticleContent ca) {
            this.ca = Optional.ofNullable(ca);
            return this;
        }

        /**
         * <p>The content of the article in Czech</p>
         */
        @JsonSetter(value = "cs", nulls = Nulls.SKIP)
        public Builder cs(Optional<ArticleContent> cs) {
            this.cs = cs;
            return this;
        }

        public Builder cs(ArticleContent cs) {
            this.cs = Optional.ofNullable(cs);
            return this;
        }

        /**
         * <p>The content of the article in Danish</p>
         */
        @JsonSetter(value = "da", nulls = Nulls.SKIP)
        public Builder da(Optional<ArticleContent> da) {
            this.da = da;
            return this;
        }

        public Builder da(ArticleContent da) {
            this.da = Optional.ofNullable(da);
            return this;
        }

        /**
         * <p>The content of the article in German</p>
         */
        @JsonSetter(value = "de", nulls = Nulls.SKIP)
        public Builder de(Optional<ArticleContent> de) {
            this.de = de;
            return this;
        }

        public Builder de(ArticleContent de) {
            this.de = Optional.ofNullable(de);
            return this;
        }

        /**
         * <p>The content of the article in Greek</p>
         */
        @JsonSetter(value = "el", nulls = Nulls.SKIP)
        public Builder el(Optional<ArticleContent> el) {
            this.el = el;
            return this;
        }

        public Builder el(ArticleContent el) {
            this.el = Optional.ofNullable(el);
            return this;
        }

        /**
         * <p>The content of the article in English</p>
         */
        @JsonSetter(value = "en", nulls = Nulls.SKIP)
        public Builder en(Optional<ArticleContent> en) {
            this.en = en;
            return this;
        }

        public Builder en(ArticleContent en) {
            this.en = Optional.ofNullable(en);
            return this;
        }

        /**
         * <p>The content of the article in Spanish</p>
         */
        @JsonSetter(value = "es", nulls = Nulls.SKIP)
        public Builder es(Optional<ArticleContent> es) {
            this.es = es;
            return this;
        }

        public Builder es(ArticleContent es) {
            this.es = Optional.ofNullable(es);
            return this;
        }

        /**
         * <p>The content of the article in Estonian</p>
         */
        @JsonSetter(value = "et", nulls = Nulls.SKIP)
        public Builder et(Optional<ArticleContent> et) {
            this.et = et;
            return this;
        }

        public Builder et(ArticleContent et) {
            this.et = Optional.ofNullable(et);
            return this;
        }

        /**
         * <p>The content of the article in Finnish</p>
         */
        @JsonSetter(value = "fi", nulls = Nulls.SKIP)
        public Builder fi(Optional<ArticleContent> fi) {
            this.fi = fi;
            return this;
        }

        public Builder fi(ArticleContent fi) {
            this.fi = Optional.ofNullable(fi);
            return this;
        }

        /**
         * <p>The content of the article in French</p>
         */
        @JsonSetter(value = "fr", nulls = Nulls.SKIP)
        public Builder fr(Optional<ArticleContent> fr) {
            this.fr = fr;
            return this;
        }

        public Builder fr(ArticleContent fr) {
            this.fr = Optional.ofNullable(fr);
            return this;
        }

        /**
         * <p>The content of the article in Hebrew</p>
         */
        @JsonSetter(value = "he", nulls = Nulls.SKIP)
        public Builder he(Optional<ArticleContent> he) {
            this.he = he;
            return this;
        }

        public Builder he(ArticleContent he) {
            this.he = Optional.ofNullable(he);
            return this;
        }

        /**
         * <p>The content of the article in Croatian</p>
         */
        @JsonSetter(value = "hr", nulls = Nulls.SKIP)
        public Builder hr(Optional<ArticleContent> hr) {
            this.hr = hr;
            return this;
        }

        public Builder hr(ArticleContent hr) {
            this.hr = Optional.ofNullable(hr);
            return this;
        }

        /**
         * <p>The content of the article in Hungarian</p>
         */
        @JsonSetter(value = "hu", nulls = Nulls.SKIP)
        public Builder hu(Optional<ArticleContent> hu) {
            this.hu = hu;
            return this;
        }

        public Builder hu(ArticleContent hu) {
            this.hu = Optional.ofNullable(hu);
            return this;
        }

        /**
         * <p>The content of the article in Indonesian</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<ArticleContent> id) {
            this.id = id;
            return this;
        }

        public Builder id(ArticleContent id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The content of the article in Italian</p>
         */
        @JsonSetter(value = "it", nulls = Nulls.SKIP)
        public Builder it(Optional<ArticleContent> it) {
            this.it = it;
            return this;
        }

        public Builder it(ArticleContent it) {
            this.it = Optional.ofNullable(it);
            return this;
        }

        /**
         * <p>The content of the article in Japanese</p>
         */
        @JsonSetter(value = "ja", nulls = Nulls.SKIP)
        public Builder ja(Optional<ArticleContent> ja) {
            this.ja = ja;
            return this;
        }

        public Builder ja(ArticleContent ja) {
            this.ja = Optional.ofNullable(ja);
            return this;
        }

        /**
         * <p>The content of the article in Korean</p>
         */
        @JsonSetter(value = "ko", nulls = Nulls.SKIP)
        public Builder ko(Optional<ArticleContent> ko) {
            this.ko = ko;
            return this;
        }

        public Builder ko(ArticleContent ko) {
            this.ko = Optional.ofNullable(ko);
            return this;
        }

        /**
         * <p>The content of the article in Lithuanian</p>
         */
        @JsonSetter(value = "lt", nulls = Nulls.SKIP)
        public Builder lt(Optional<ArticleContent> lt) {
            this.lt = lt;
            return this;
        }

        public Builder lt(ArticleContent lt) {
            this.lt = Optional.ofNullable(lt);
            return this;
        }

        /**
         * <p>The content of the article in Latvian</p>
         */
        @JsonSetter(value = "lv", nulls = Nulls.SKIP)
        public Builder lv(Optional<ArticleContent> lv) {
            this.lv = lv;
            return this;
        }

        public Builder lv(ArticleContent lv) {
            this.lv = Optional.ofNullable(lv);
            return this;
        }

        /**
         * <p>The content of the article in Mongolian</p>
         */
        @JsonSetter(value = "mn", nulls = Nulls.SKIP)
        public Builder mn(Optional<ArticleContent> mn) {
            this.mn = mn;
            return this;
        }

        public Builder mn(ArticleContent mn) {
            this.mn = Optional.ofNullable(mn);
            return this;
        }

        /**
         * <p>The content of the article in Norwegian</p>
         */
        @JsonSetter(value = "nb", nulls = Nulls.SKIP)
        public Builder nb(Optional<ArticleContent> nb) {
            this.nb = nb;
            return this;
        }

        public Builder nb(ArticleContent nb) {
            this.nb = Optional.ofNullable(nb);
            return this;
        }

        /**
         * <p>The content of the article in Dutch</p>
         */
        @JsonSetter(value = "nl", nulls = Nulls.SKIP)
        public Builder nl(Optional<ArticleContent> nl) {
            this.nl = nl;
            return this;
        }

        public Builder nl(ArticleContent nl) {
            this.nl = Optional.ofNullable(nl);
            return this;
        }

        /**
         * <p>The content of the article in Polish</p>
         */
        @JsonSetter(value = "pl", nulls = Nulls.SKIP)
        public Builder pl(Optional<ArticleContent> pl) {
            this.pl = pl;
            return this;
        }

        public Builder pl(ArticleContent pl) {
            this.pl = Optional.ofNullable(pl);
            return this;
        }

        /**
         * <p>The content of the article in Portuguese (Portugal)</p>
         */
        @JsonSetter(value = "pt", nulls = Nulls.SKIP)
        public Builder pt(Optional<ArticleContent> pt) {
            this.pt = pt;
            return this;
        }

        public Builder pt(ArticleContent pt) {
            this.pt = Optional.ofNullable(pt);
            return this;
        }

        /**
         * <p>The content of the article in Romanian</p>
         */
        @JsonSetter(value = "ro", nulls = Nulls.SKIP)
        public Builder ro(Optional<ArticleContent> ro) {
            this.ro = ro;
            return this;
        }

        public Builder ro(ArticleContent ro) {
            this.ro = Optional.ofNullable(ro);
            return this;
        }

        /**
         * <p>The content of the article in Russian</p>
         */
        @JsonSetter(value = "ru", nulls = Nulls.SKIP)
        public Builder ru(Optional<ArticleContent> ru) {
            this.ru = ru;
            return this;
        }

        public Builder ru(ArticleContent ru) {
            this.ru = Optional.ofNullable(ru);
            return this;
        }

        /**
         * <p>The content of the article in Slovenian</p>
         */
        @JsonSetter(value = "sl", nulls = Nulls.SKIP)
        public Builder sl(Optional<ArticleContent> sl) {
            this.sl = sl;
            return this;
        }

        public Builder sl(ArticleContent sl) {
            this.sl = Optional.ofNullable(sl);
            return this;
        }

        /**
         * <p>The content of the article in Serbian</p>
         */
        @JsonSetter(value = "sr", nulls = Nulls.SKIP)
        public Builder sr(Optional<ArticleContent> sr) {
            this.sr = sr;
            return this;
        }

        public Builder sr(ArticleContent sr) {
            this.sr = Optional.ofNullable(sr);
            return this;
        }

        /**
         * <p>The content of the article in Swedish</p>
         */
        @JsonSetter(value = "sv", nulls = Nulls.SKIP)
        public Builder sv(Optional<ArticleContent> sv) {
            this.sv = sv;
            return this;
        }

        public Builder sv(ArticleContent sv) {
            this.sv = Optional.ofNullable(sv);
            return this;
        }

        /**
         * <p>The content of the article in Turkish</p>
         */
        @JsonSetter(value = "tr", nulls = Nulls.SKIP)
        public Builder tr(Optional<ArticleContent> tr) {
            this.tr = tr;
            return this;
        }

        public Builder tr(ArticleContent tr) {
            this.tr = Optional.ofNullable(tr);
            return this;
        }

        /**
         * <p>The content of the article in Vietnamese</p>
         */
        @JsonSetter(value = "vi", nulls = Nulls.SKIP)
        public Builder vi(Optional<ArticleContent> vi) {
            this.vi = vi;
            return this;
        }

        public Builder vi(ArticleContent vi) {
            this.vi = Optional.ofNullable(vi);
            return this;
        }

        /**
         * <p>The content of the article in Portuguese (Brazil)</p>
         */
        @JsonSetter(value = "pt-BR", nulls = Nulls.SKIP)
        public Builder ptBr(Optional<ArticleContent> ptBr) {
            this.ptBr = ptBr;
            return this;
        }

        public Builder ptBr(ArticleContent ptBr) {
            this.ptBr = Optional.ofNullable(ptBr);
            return this;
        }

        /**
         * <p>The content of the article in Chinese (China)</p>
         */
        @JsonSetter(value = "zh-CN", nulls = Nulls.SKIP)
        public Builder zhCn(Optional<ArticleContent> zhCn) {
            this.zhCn = zhCn;
            return this;
        }

        public Builder zhCn(ArticleContent zhCn) {
            this.zhCn = Optional.ofNullable(zhCn);
            return this;
        }

        /**
         * <p>The content of the article in Chinese (Taiwan)</p>
         */
        @JsonSetter(value = "zh-TW", nulls = Nulls.SKIP)
        public Builder zhTw(Optional<ArticleContent> zhTw) {
            this.zhTw = zhTw;
            return this;
        }

        public Builder zhTw(ArticleContent zhTw) {
            this.zhTw = Optional.ofNullable(zhTw);
            return this;
        }

        public ArticleTranslatedContent build() {
            return new ArticleTranslatedContent(
                    type,
                    ar,
                    bg,
                    bs,
                    ca,
                    cs,
                    da,
                    de,
                    el,
                    en,
                    es,
                    et,
                    fi,
                    fr,
                    he,
                    hr,
                    hu,
                    id,
                    it,
                    ja,
                    ko,
                    lt,
                    lv,
                    mn,
                    nb,
                    nl,
                    pl,
                    pt,
                    ro,
                    ru,
                    sl,
                    sr,
                    sv,
                    tr,
                    vi,
                    ptBr,
                    zhCn,
                    zhTw,
                    additionalProperties);
        }
    }
}
