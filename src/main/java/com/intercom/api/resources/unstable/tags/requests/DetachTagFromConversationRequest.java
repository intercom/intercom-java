/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.resources.unstable.tags.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DetachTagFromConversationRequest.Builder.class)
public final class DetachTagFromConversationRequest {
    private final String conversationId;

    private final String id;

    private final String adminId;

    private final Map<String, Object> additionalProperties;

    private DetachTagFromConversationRequest(
            String conversationId, String id, String adminId, Map<String, Object> additionalProperties) {
        this.conversationId = conversationId;
        this.id = id;
        this.adminId = adminId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return conversation_id
     */
    @JsonProperty("conversation_id")
    public String getConversationId() {
        return conversationId;
    }

    /**
     * @return id
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The unique identifier for the admin which is given by Intercom.
     */
    @JsonProperty("admin_id")
    public String getAdminId() {
        return adminId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DetachTagFromConversationRequest && equalTo((DetachTagFromConversationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DetachTagFromConversationRequest other) {
        return conversationId.equals(other.conversationId) && id.equals(other.id) && adminId.equals(other.adminId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.conversationId, this.id, this.adminId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ConversationIdStage builder() {
        return new Builder();
    }

    public interface ConversationIdStage {
        /**
         * conversation_id
         */
        IdStage conversationId(@NotNull String conversationId);

        Builder from(DetachTagFromConversationRequest other);
    }

    public interface IdStage {
        /**
         * id
         */
        AdminIdStage id(@NotNull String id);
    }

    public interface AdminIdStage {
        /**
         * The unique identifier for the admin which is given by Intercom.
         */
        _FinalStage adminId(@NotNull String adminId);
    }

    public interface _FinalStage {
        DetachTagFromConversationRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ConversationIdStage, IdStage, AdminIdStage, _FinalStage {
        private String conversationId;

        private String id;

        private String adminId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DetachTagFromConversationRequest other) {
            conversationId(other.getConversationId());
            id(other.getId());
            adminId(other.getAdminId());
            return this;
        }

        /**
         * conversation_id<p>conversation_id</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("conversation_id")
        public IdStage conversationId(@NotNull String conversationId) {
            this.conversationId = Objects.requireNonNull(conversationId, "conversationId must not be null");
            return this;
        }

        /**
         * id<p>id</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public AdminIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * The unique identifier for the admin which is given by Intercom.<p>The unique identifier for the admin which is given by Intercom.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("admin_id")
        public _FinalStage adminId(@NotNull String adminId) {
            this.adminId = Objects.requireNonNull(adminId, "adminId must not be null");
            return this;
        }

        @java.lang.Override
        public DetachTagFromConversationRequest build() {
            return new DetachTagFromConversationRequest(conversationId, id, adminId, additionalProperties);
        }
    }
}
