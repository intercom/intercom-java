/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.resources.unstable.export.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetExportReportingDataGetDatasetsResponse.Builder.class)
public final class GetExportReportingDataGetDatasetsResponse {
    private final Optional<String> type;

    private final Optional<List<DataItem>> data;

    private final Map<String, Object> additionalProperties;

    private GetExportReportingDataGetDatasetsResponse(
            Optional<String> type, Optional<List<DataItem>> data, Map<String, Object> additionalProperties) {
        this.type = type;
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("data")
    public Optional<List<DataItem>> getData() {
        return data;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetExportReportingDataGetDatasetsResponse
                && equalTo((GetExportReportingDataGetDatasetsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetExportReportingDataGetDatasetsResponse other) {
        return type.equals(other.type) && data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> type = Optional.empty();

        private Optional<List<DataItem>> data = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetExportReportingDataGetDatasetsResponse other) {
            type(other.getType());
            data(other.getData());
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<List<DataItem>> data) {
            this.data = data;
            return this;
        }

        public Builder data(List<DataItem> data) {
            this.data = Optional.ofNullable(data);
            return this;
        }

        public GetExportReportingDataGetDatasetsResponse build() {
            return new GetExportReportingDataGetDatasetsResponse(type, data, additionalProperties);
        }
    }

    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    @JsonDeserialize(builder = DataItem.Builder.class)
    public static final class DataItem {
        private final Optional<String> id;

        private final Optional<String> name;

        private final Optional<String> description;

        private final Optional<String> defaultTimeAttributeId;

        private final Optional<List<AttributesItem>> attributes;

        private final Map<String, Object> additionalProperties;

        private DataItem(
                Optional<String> id,
                Optional<String> name,
                Optional<String> description,
                Optional<String> defaultTimeAttributeId,
                Optional<List<AttributesItem>> attributes,
                Map<String, Object> additionalProperties) {
            this.id = id;
            this.name = name;
            this.description = description;
            this.defaultTimeAttributeId = defaultTimeAttributeId;
            this.attributes = attributes;
            this.additionalProperties = additionalProperties;
        }

        @JsonProperty("id")
        public Optional<String> getId() {
            return id;
        }

        @JsonProperty("name")
        public Optional<String> getName() {
            return name;
        }

        @JsonProperty("description")
        public Optional<String> getDescription() {
            return description;
        }

        @JsonProperty("default_time_attribute_id")
        public Optional<String> getDefaultTimeAttributeId() {
            return defaultTimeAttributeId;
        }

        @JsonProperty("attributes")
        public Optional<List<AttributesItem>> getAttributes() {
            return attributes;
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DataItem && equalTo((DataItem) other);
        }

        @JsonAnyGetter
        public Map<String, Object> getAdditionalProperties() {
            return this.additionalProperties;
        }

        private boolean equalTo(DataItem other) {
            return id.equals(other.id)
                    && name.equals(other.name)
                    && description.equals(other.description)
                    && defaultTimeAttributeId.equals(other.defaultTimeAttributeId)
                    && attributes.equals(other.attributes);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.id, this.name, this.description, this.defaultTimeAttributeId, this.attributes);
        }

        @java.lang.Override
        public String toString() {
            return ObjectMappers.stringify(this);
        }

        public static Builder builder() {
            return new Builder();
        }

        @JsonIgnoreProperties(ignoreUnknown = true)
        public static final class Builder {
            private Optional<String> id = Optional.empty();

            private Optional<String> name = Optional.empty();

            private Optional<String> description = Optional.empty();

            private Optional<String> defaultTimeAttributeId = Optional.empty();

            private Optional<List<AttributesItem>> attributes = Optional.empty();

            @JsonAnySetter
            private Map<String, Object> additionalProperties = new HashMap<>();

            private Builder() {}

            public Builder from(DataItem other) {
                id(other.getId());
                name(other.getName());
                description(other.getDescription());
                defaultTimeAttributeId(other.getDefaultTimeAttributeId());
                attributes(other.getAttributes());
                return this;
            }

            @JsonSetter(value = "id", nulls = Nulls.SKIP)
            public Builder id(Optional<String> id) {
                this.id = id;
                return this;
            }

            public Builder id(String id) {
                this.id = Optional.ofNullable(id);
                return this;
            }

            @JsonSetter(value = "name", nulls = Nulls.SKIP)
            public Builder name(Optional<String> name) {
                this.name = name;
                return this;
            }

            public Builder name(String name) {
                this.name = Optional.ofNullable(name);
                return this;
            }

            @JsonSetter(value = "description", nulls = Nulls.SKIP)
            public Builder description(Optional<String> description) {
                this.description = description;
                return this;
            }

            public Builder description(String description) {
                this.description = Optional.ofNullable(description);
                return this;
            }

            @JsonSetter(value = "default_time_attribute_id", nulls = Nulls.SKIP)
            public Builder defaultTimeAttributeId(Optional<String> defaultTimeAttributeId) {
                this.defaultTimeAttributeId = defaultTimeAttributeId;
                return this;
            }

            public Builder defaultTimeAttributeId(String defaultTimeAttributeId) {
                this.defaultTimeAttributeId = Optional.ofNullable(defaultTimeAttributeId);
                return this;
            }

            @JsonSetter(value = "attributes", nulls = Nulls.SKIP)
            public Builder attributes(Optional<List<AttributesItem>> attributes) {
                this.attributes = attributes;
                return this;
            }

            public Builder attributes(List<AttributesItem> attributes) {
                this.attributes = Optional.ofNullable(attributes);
                return this;
            }

            public DataItem build() {
                return new DataItem(id, name, description, defaultTimeAttributeId, attributes, additionalProperties);
            }
        }

        @JsonInclude(JsonInclude.Include.NON_ABSENT)
        @JsonDeserialize(builder = AttributesItem.Builder.class)
        public static final class AttributesItem {
            private final Optional<String> id;

            private final Optional<String> name;

            private final Map<String, Object> additionalProperties;

            private AttributesItem(
                    Optional<String> id, Optional<String> name, Map<String, Object> additionalProperties) {
                this.id = id;
                this.name = name;
                this.additionalProperties = additionalProperties;
            }

            @JsonProperty("id")
            public Optional<String> getId() {
                return id;
            }

            @JsonProperty("name")
            public Optional<String> getName() {
                return name;
            }

            @java.lang.Override
            public boolean equals(Object other) {
                if (this == other) return true;
                return other instanceof AttributesItem && equalTo((AttributesItem) other);
            }

            @JsonAnyGetter
            public Map<String, Object> getAdditionalProperties() {
                return this.additionalProperties;
            }

            private boolean equalTo(AttributesItem other) {
                return id.equals(other.id) && name.equals(other.name);
            }

            @java.lang.Override
            public int hashCode() {
                return Objects.hash(this.id, this.name);
            }

            @java.lang.Override
            public String toString() {
                return ObjectMappers.stringify(this);
            }

            public static Builder builder() {
                return new Builder();
            }

            @JsonIgnoreProperties(ignoreUnknown = true)
            public static final class Builder {
                private Optional<String> id = Optional.empty();

                private Optional<String> name = Optional.empty();

                @JsonAnySetter
                private Map<String, Object> additionalProperties = new HashMap<>();

                private Builder() {}

                public Builder from(AttributesItem other) {
                    id(other.getId());
                    name(other.getName());
                    return this;
                }

                @JsonSetter(value = "id", nulls = Nulls.SKIP)
                public Builder id(Optional<String> id) {
                    this.id = id;
                    return this;
                }

                public Builder id(String id) {
                    this.id = Optional.ofNullable(id);
                    return this;
                }

                @JsonSetter(value = "name", nulls = Nulls.SKIP)
                public Builder name(Optional<String> name) {
                    this.name = name;
                    return this;
                }

                public Builder name(String name) {
                    this.name = Optional.ofNullable(name);
                    return this;
                }

                public AttributesItem build() {
                    return new AttributesItem(id, name, additionalProperties);
                }
            }
        }
    }
}
