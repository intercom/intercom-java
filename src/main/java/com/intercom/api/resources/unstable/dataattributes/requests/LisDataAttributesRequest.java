/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.resources.unstable.dataattributes.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import com.intercom.api.resources.unstable.dataattributes.types.LisDataAttributesRequestModel;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LisDataAttributesRequest.Builder.class)
public final class LisDataAttributesRequest {
    private final Optional<LisDataAttributesRequestModel> model;

    private final Optional<Boolean> includeArchived;

    private final Map<String, Object> additionalProperties;

    private LisDataAttributesRequest(
            Optional<LisDataAttributesRequestModel> model,
            Optional<Boolean> includeArchived,
            Map<String, Object> additionalProperties) {
        this.model = model;
        this.includeArchived = includeArchived;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Specify the data attribute model to return.
     */
    @JsonProperty("model")
    public Optional<LisDataAttributesRequestModel> getModel() {
        return model;
    }

    /**
     * @return Include archived attributes in the list. By default we return only non archived data attributes.
     */
    @JsonProperty("include_archived")
    public Optional<Boolean> getIncludeArchived() {
        return includeArchived;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LisDataAttributesRequest && equalTo((LisDataAttributesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LisDataAttributesRequest other) {
        return model.equals(other.model) && includeArchived.equals(other.includeArchived);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.model, this.includeArchived);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<LisDataAttributesRequestModel> model = Optional.empty();

        private Optional<Boolean> includeArchived = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LisDataAttributesRequest other) {
            model(other.getModel());
            includeArchived(other.getIncludeArchived());
            return this;
        }

        /**
         * <p>Specify the data attribute model to return.</p>
         */
        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public Builder model(Optional<LisDataAttributesRequestModel> model) {
            this.model = model;
            return this;
        }

        public Builder model(LisDataAttributesRequestModel model) {
            this.model = Optional.ofNullable(model);
            return this;
        }

        /**
         * <p>Include archived attributes in the list. By default we return only non archived data attributes.</p>
         */
        @JsonSetter(value = "include_archived", nulls = Nulls.SKIP)
        public Builder includeArchived(Optional<Boolean> includeArchived) {
            this.includeArchived = includeArchived;
            return this;
        }

        public Builder includeArchived(Boolean includeArchived) {
            this.includeArchived = Optional.ofNullable(includeArchived);
            return this;
        }

        public LisDataAttributesRequest build() {
            return new LisDataAttributesRequest(model, includeArchived, additionalProperties);
        }
    }
}
