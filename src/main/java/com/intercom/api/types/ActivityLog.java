/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ActivityLog.Builder.class)
public final class ActivityLog {
    private final String id;

    private final PerformedBy performedBy;

    private final Optional<ActivityLogMetadata> metadata;

    private final Optional<Integer> createdAt;

    private final ActivityType activityType;

    private final Optional<String> activityDescription;

    private final Map<String, Object> additionalProperties;

    private ActivityLog(
            String id,
            PerformedBy performedBy,
            Optional<ActivityLogMetadata> metadata,
            Optional<Integer> createdAt,
            ActivityType activityType,
            Optional<String> activityDescription,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.performedBy = performedBy;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.activityType = activityType;
        this.activityDescription = activityDescription;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The id representing the activity.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return Details about the Admin involved in the activity.
     */
    @JsonProperty("performed_by")
    public PerformedBy getPerformedBy() {
        return performedBy;
    }

    @JsonProperty("metadata")
    public Optional<ActivityLogMetadata> getMetadata() {
        return metadata;
    }

    /**
     * @return The time the activity was created.
     */
    @JsonProperty("created_at")
    public Optional<Integer> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("activity_type")
    public ActivityType getActivityType() {
        return activityType;
    }

    /**
     * @return A sentence or two describing the activity.
     */
    @JsonProperty("activity_description")
    public Optional<String> getActivityDescription() {
        return activityDescription;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ActivityLog && equalTo((ActivityLog) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ActivityLog other) {
        return id.equals(other.id)
                && performedBy.equals(other.performedBy)
                && metadata.equals(other.metadata)
                && createdAt.equals(other.createdAt)
                && activityType.equals(other.activityType)
                && activityDescription.equals(other.activityDescription);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.performedBy, this.metadata, this.createdAt, this.activityType, this.activityDescription);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        PerformedByStage id(@NotNull String id);

        Builder from(ActivityLog other);
    }

    public interface PerformedByStage {
        ActivityTypeStage performedBy(@NotNull PerformedBy performedBy);
    }

    public interface ActivityTypeStage {
        _FinalStage activityType(@NotNull ActivityType activityType);
    }

    public interface _FinalStage {
        ActivityLog build();

        _FinalStage metadata(Optional<ActivityLogMetadata> metadata);

        _FinalStage metadata(ActivityLogMetadata metadata);

        _FinalStage createdAt(Optional<Integer> createdAt);

        _FinalStage createdAt(Integer createdAt);

        _FinalStage activityDescription(Optional<String> activityDescription);

        _FinalStage activityDescription(String activityDescription);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, PerformedByStage, ActivityTypeStage, _FinalStage {
        private String id;

        private PerformedBy performedBy;

        private ActivityType activityType;

        private Optional<String> activityDescription = Optional.empty();

        private Optional<Integer> createdAt = Optional.empty();

        private Optional<ActivityLogMetadata> metadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ActivityLog other) {
            id(other.getId());
            performedBy(other.getPerformedBy());
            metadata(other.getMetadata());
            createdAt(other.getCreatedAt());
            activityType(other.getActivityType());
            activityDescription(other.getActivityDescription());
            return this;
        }

        /**
         * <p>The id representing the activity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public PerformedByStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Details about the Admin involved in the activity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("performed_by")
        public ActivityTypeStage performedBy(@NotNull PerformedBy performedBy) {
            this.performedBy = Objects.requireNonNull(performedBy, "performedBy must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("activity_type")
        public _FinalStage activityType(@NotNull ActivityType activityType) {
            this.activityType = Objects.requireNonNull(activityType, "activityType must not be null");
            return this;
        }

        /**
         * <p>A sentence or two describing the activity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage activityDescription(String activityDescription) {
            this.activityDescription = Optional.ofNullable(activityDescription);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "activity_description", nulls = Nulls.SKIP)
        public _FinalStage activityDescription(Optional<String> activityDescription) {
            this.activityDescription = activityDescription;
            return this;
        }

        /**
         * <p>The time the activity was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(Integer createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<Integer> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage metadata(ActivityLogMetadata metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<ActivityLogMetadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        @java.lang.Override
        public ActivityLog build() {
            return new ActivityLog(
                    id, performedBy, metadata, createdAt, activityType, activityDescription, additionalProperties);
        }
    }

    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    @JsonDeserialize(builder = PerformedBy.Builder.class)
    public static final class PerformedBy {
        private final Optional<String> type;

        private final Optional<String> id;

        private final Optional<String> email;

        private final Optional<String> ip;

        private final Map<String, Object> additionalProperties;

        private PerformedBy(
                Optional<String> type,
                Optional<String> id,
                Optional<String> email,
                Optional<String> ip,
                Map<String, Object> additionalProperties) {
            this.type = type;
            this.id = id;
            this.email = email;
            this.ip = ip;
            this.additionalProperties = additionalProperties;
        }

        /**
         * @return String representing the object's type. Always has the value <code>admin</code>.
         */
        @JsonProperty("type")
        public Optional<String> getType() {
            return type;
        }

        /**
         * @return The id representing the admin.
         */
        @JsonProperty("id")
        public Optional<String> getId() {
            return id;
        }

        /**
         * @return The email of the admin.
         */
        @JsonProperty("email")
        public Optional<String> getEmail() {
            return email;
        }

        /**
         * @return The IP address of the admin.
         */
        @JsonProperty("ip")
        public Optional<String> getIp() {
            return ip;
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof PerformedBy && equalTo((PerformedBy) other);
        }

        @JsonAnyGetter
        public Map<String, Object> getAdditionalProperties() {
            return this.additionalProperties;
        }

        private boolean equalTo(PerformedBy other) {
            return type.equals(other.type) && id.equals(other.id) && email.equals(other.email) && ip.equals(other.ip);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.id, this.email, this.ip);
        }

        @java.lang.Override
        public String toString() {
            return ObjectMappers.stringify(this);
        }

        public static Builder builder() {
            return new Builder();
        }

        @JsonIgnoreProperties(ignoreUnknown = true)
        public static final class Builder {
            private Optional<String> type = Optional.empty();

            private Optional<String> id = Optional.empty();

            private Optional<String> email = Optional.empty();

            private Optional<String> ip = Optional.empty();

            @JsonAnySetter
            private Map<String, Object> additionalProperties = new HashMap<>();

            private Builder() {}

            public Builder from(PerformedBy other) {
                type(other.getType());
                id(other.getId());
                email(other.getEmail());
                ip(other.getIp());
                return this;
            }

            @JsonSetter(value = "type", nulls = Nulls.SKIP)
            public Builder type(Optional<String> type) {
                this.type = type;
                return this;
            }

            public Builder type(String type) {
                this.type = Optional.ofNullable(type);
                return this;
            }

            @JsonSetter(value = "id", nulls = Nulls.SKIP)
            public Builder id(Optional<String> id) {
                this.id = id;
                return this;
            }

            public Builder id(String id) {
                this.id = Optional.ofNullable(id);
                return this;
            }

            @JsonSetter(value = "email", nulls = Nulls.SKIP)
            public Builder email(Optional<String> email) {
                this.email = email;
                return this;
            }

            public Builder email(String email) {
                this.email = Optional.ofNullable(email);
                return this;
            }

            @JsonSetter(value = "ip", nulls = Nulls.SKIP)
            public Builder ip(Optional<String> ip) {
                this.ip = ip;
                return this;
            }

            public Builder ip(String ip) {
                this.ip = Optional.ofNullable(ip);
                return this;
            }

            public PerformedBy build() {
                return new PerformedBy(type, id, email, ip, additionalProperties);
            }
        }
    }

    public enum ActivityType {
        ADMIN_ASSIGNMENT_LIMIT_CHANGE("admin_assignment_limit_change"),

        ADMIN_AWAY_MODE_CHANGE("admin_away_mode_change"),

        ADMIN_DELETION("admin_deletion"),

        ADMIN_DEPROVISIONED("admin_deprovisioned"),

        ADMIN_IMPERSONATION_END("admin_impersonation_end"),

        ADMIN_IMPERSONATION_START("admin_impersonation_start"),

        ADMIN_INVITE_CHANGE("admin_invite_change"),

        ADMIN_INVITE_CREATION("admin_invite_creation"),

        ADMIN_INVITE_DELETION("admin_invite_deletion"),

        ADMIN_LOGIN_FAILURE("admin_login_failure"),

        ADMIN_LOGIN_SUCCESS("admin_login_success"),

        ADMIN_LOGOUT("admin_logout"),

        ADMIN_PASSWORD_RESET_REQUEST("admin_password_reset_request"),

        ADMIN_PASSWORD_RESET_SUCCESS("admin_password_reset_success"),

        ADMIN_PERMISSION_CHANGE("admin_permission_change"),

        ADMIN_PROVISIONED("admin_provisioned"),

        ADMIN_TWO_FACTOR_AUTH_CHANGE("admin_two_factor_auth_change"),

        ADMIN_UNAUTHORIZED_SIGN_IN_METHOD("admin_unauthorized_sign_in_method"),

        APP_ADMIN_JOIN("app_admin_join"),

        APP_AUTHENTICATION_METHOD_CHANGE("app_authentication_method_change"),

        APP_DATA_DELETION("app_data_deletion"),

        APP_DATA_EXPORT("app_data_export"),

        APP_GOOGLE_SSO_DOMAIN_CHANGE("app_google_sso_domain_change"),

        APP_IDENTITY_VERIFICATION_CHANGE("app_identity_verification_change"),

        APP_NAME_CHANGE("app_name_change"),

        APP_OUTBOUND_ADDRESS_CHANGE("app_outbound_address_change"),

        APP_PACKAGE_INSTALLATION("app_package_installation"),

        APP_PACKAGE_TOKEN_REGENERATION("app_package_token_regeneration"),

        APP_PACKAGE_UNINSTALLATION("app_package_uninstallation"),

        APP_TEAM_CREATION("app_team_creation"),

        APP_TEAM_DELETION("app_team_deletion"),

        APP_TEAM_MEMBERSHIP_MODIFICATION("app_team_membership_modification"),

        APP_TIMEZONE_CHANGE("app_timezone_change"),

        APP_WEBHOOK_CREATION("app_webhook_creation"),

        APP_WEBHOOK_DELETION("app_webhook_deletion"),

        ARTICLES_IN_MESSENGER_ENABLED_CHANGE("articles_in_messenger_enabled_change"),

        BULK_DELETE("bulk_delete"),

        BULK_EXPORT("bulk_export"),

        CAMPAIGN_DELETION("campaign_deletion"),

        CAMPAIGN_STATE_CHANGE("campaign_state_change"),

        CONVERSATION_PART_DELETION("conversation_part_deletion"),

        CONVERSATION_TOPIC_CHANGE("conversation_topic_change"),

        CONVERSATION_TOPIC_CREATION("conversation_topic_creation"),

        CONVERSATION_TOPIC_DELETION("conversation_topic_deletion"),

        HELP_CENTER_SETTINGS_CHANGE("help_center_settings_change"),

        INBOUND_CONVERSATIONS_CHANGE("inbound_conversations_change"),

        INBOX_ACCESS_CHANGE("inbox_access_change"),

        MESSAGE_DELETION("message_deletion"),

        MESSAGE_STATE_CHANGE("message_state_change"),

        MESSENGER_LOOK_AND_FEEL_CHANGE("messenger_look_and_feel_change"),

        MESSENGER_SEARCH_REQUIRED_CHANGE("messenger_search_required_change"),

        MESSENGER_SPACES_CHANGE("messenger_spaces_change"),

        OFFICE_HOURS_CHANGE("office_hours_change"),

        ROLE_CHANGE("role_change"),

        ROLE_CREATION("role_creation"),

        ROLE_DELETION("role_deletion"),

        RULESET_ACTIVATION_TITLE_PREVIEW("ruleset_activation_title_preview"),

        RULESET_CREATION("ruleset_creation"),

        RULESET_DELETION("ruleset_deletion"),

        SEARCH_BROWSE_ENABLED_CHANGE("search_browse_enabled_change"),

        SEARCH_BROWSE_REQUIRED_CHANGE("search_browse_required_change"),

        SEAT_CHANGE("seat_change"),

        SEAT_REVOKE("seat_revoke"),

        SECURITY_SETTINGS_CHANGE("security_settings_change"),

        TEMPORARY_EXPECTATION_CHANGE("temporary_expectation_change"),

        UPFRONT_EMAIL_COLLECTION_CHANGE("upfront_email_collection_change"),

        WELCOME_MESSAGE_CHANGE("welcome_message_change");

        private final String value;

        ActivityType(String value) {
            this.value = value;
        }

        @JsonValue
        @java.lang.Override
        public String toString() {
            return this.value;
        }
    }
}
