/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TagCompanyRequest.Builder.class)
public final class TagCompanyRequest {
    private final String name;

    private final List<CompaniesItem> companies;

    private final Map<String, Object> additionalProperties;

    private TagCompanyRequest(String name, List<CompaniesItem> companies, Map<String, Object> additionalProperties) {
        this.name = name;
        this.companies = companies;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the tag, which will be created if not found.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The id or company_id of the company can be passed as input parameters.
     */
    @JsonProperty("companies")
    public List<CompaniesItem> getCompanies() {
        return companies;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TagCompanyRequest && equalTo((TagCompanyRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TagCompanyRequest other) {
        return name.equals(other.name) && companies.equals(other.companies);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.companies);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(TagCompanyRequest other);
    }

    public interface _FinalStage {
        TagCompanyRequest build();

        _FinalStage companies(List<CompaniesItem> companies);

        _FinalStage addCompanies(CompaniesItem companies);

        _FinalStage addAllCompanies(List<CompaniesItem> companies);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private List<CompaniesItem> companies = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TagCompanyRequest other) {
            name(other.getName());
            companies(other.getCompanies());
            return this;
        }

        /**
         * <p>The name of the tag, which will be created if not found.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The id or company_id of the company can be passed as input parameters.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllCompanies(List<CompaniesItem> companies) {
            this.companies.addAll(companies);
            return this;
        }

        /**
         * <p>The id or company_id of the company can be passed as input parameters.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addCompanies(CompaniesItem companies) {
            this.companies.add(companies);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "companies", nulls = Nulls.SKIP)
        public _FinalStage companies(List<CompaniesItem> companies) {
            this.companies.clear();
            this.companies.addAll(companies);
            return this;
        }

        @java.lang.Override
        public TagCompanyRequest build() {
            return new TagCompanyRequest(name, companies, additionalProperties);
        }
    }

    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    @JsonDeserialize(builder = CompaniesItem.Builder.class)
    public static final class CompaniesItem {
        private final Optional<String> id;

        private final Optional<String> companyId;

        private final Map<String, Object> additionalProperties;

        private CompaniesItem(
                Optional<String> id, Optional<String> companyId, Map<String, Object> additionalProperties) {
            this.id = id;
            this.companyId = companyId;
            this.additionalProperties = additionalProperties;
        }

        /**
         * @return The Intercom defined id representing the company.
         */
        @JsonProperty("id")
        public Optional<String> getId() {
            return id;
        }

        /**
         * @return The company id you have defined for the company.
         */
        @JsonProperty("company_id")
        public Optional<String> getCompanyId() {
            return companyId;
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CompaniesItem && equalTo((CompaniesItem) other);
        }

        @JsonAnyGetter
        public Map<String, Object> getAdditionalProperties() {
            return this.additionalProperties;
        }

        private boolean equalTo(CompaniesItem other) {
            return id.equals(other.id) && companyId.equals(other.companyId);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.id, this.companyId);
        }

        @java.lang.Override
        public String toString() {
            return ObjectMappers.stringify(this);
        }

        public static Builder builder() {
            return new Builder();
        }

        @JsonIgnoreProperties(ignoreUnknown = true)
        public static final class Builder {
            private Optional<String> id = Optional.empty();

            private Optional<String> companyId = Optional.empty();

            @JsonAnySetter
            private Map<String, Object> additionalProperties = new HashMap<>();

            private Builder() {}

            public Builder from(CompaniesItem other) {
                id(other.getId());
                companyId(other.getCompanyId());
                return this;
            }

            @JsonSetter(value = "id", nulls = Nulls.SKIP)
            public Builder id(Optional<String> id) {
                this.id = id;
                return this;
            }

            public Builder id(String id) {
                this.id = Optional.ofNullable(id);
                return this;
            }

            @JsonSetter(value = "company_id", nulls = Nulls.SKIP)
            public Builder companyId(Optional<String> companyId) {
                this.companyId = companyId;
                return this;
            }

            public Builder companyId(String companyId) {
                this.companyId = Optional.ofNullable(companyId);
                return this;
            }

            public CompaniesItem build() {
                return new CompaniesItem(id, companyId, additionalProperties);
            }
        }
    }
}
