/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.intercom.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.intercom.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConversationSource.Builder.class)
public final class ConversationSource {
    private final Type type;

    private final String id;

    private final String deliveredAs;

    private final String subject;

    private final Optional<String> body;

    private final ConversationPartAuthor author;

    private final Optional<List<PartAttachment>> attachments;

    private final Optional<String> url;

    private final boolean redacted;

    private final Map<String, Object> additionalProperties;

    private ConversationSource(
            Type type,
            String id,
            String deliveredAs,
            String subject,
            Optional<String> body,
            ConversationPartAuthor author,
            Optional<List<PartAttachment>> attachments,
            Optional<String> url,
            boolean redacted,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.id = id;
        this.deliveredAs = deliveredAs;
        this.subject = subject;
        this.body = body;
        this.author = author;
        this.attachments = attachments;
        this.url = url;
        this.redacted = redacted;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This includes conversation, email, facebook, instagram, phone_call, phone_switch, push, sms, twitter and whatsapp.
     */
    @JsonProperty("type")
    public Type getType() {
        return type;
    }

    /**
     * @return The id representing the message.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The conversation's initiation type. Possible values are customer_initiated, campaigns_initiated (legacy campaigns), operator_initiated (Custom bot), automated (Series and other outbounds with dynamic audience message) and admin_initiated (fixed audience message, ticket initiated by an admin, group email).
     */
    @JsonProperty("delivered_as")
    public String getDeliveredAs() {
        return deliveredAs;
    }

    /**
     * @return Optional. The message subject. For Twitter, this will show a generic message regarding why the subject is obscured.
     */
    @JsonProperty("subject")
    public String getSubject() {
        return subject;
    }

    /**
     * @return The message body, which may contain HTML. For Twitter, this will show a generic message regarding why the body is obscured.
     */
    @JsonProperty("body")
    public Optional<String> getBody() {
        return body;
    }

    @JsonProperty("author")
    public ConversationPartAuthor getAuthor() {
        return author;
    }

    /**
     * @return A list of attachments for the part.
     */
    @JsonProperty("attachments")
    public Optional<List<PartAttachment>> getAttachments() {
        return attachments;
    }

    /**
     * @return The URL where the conversation was started. For Twitter, Email, and Bots, this will be blank.
     */
    @JsonProperty("url")
    public Optional<String> getUrl() {
        return url;
    }

    /**
     * @return Whether or not the source message has been redacted. Only applicable for contact initiated messages.
     */
    @JsonProperty("redacted")
    public boolean getRedacted() {
        return redacted;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConversationSource && equalTo((ConversationSource) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConversationSource other) {
        return type.equals(other.type)
                && id.equals(other.id)
                && deliveredAs.equals(other.deliveredAs)
                && subject.equals(other.subject)
                && body.equals(other.body)
                && author.equals(other.author)
                && attachments.equals(other.attachments)
                && url.equals(other.url)
                && redacted == other.redacted;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.id,
                this.deliveredAs,
                this.subject,
                this.body,
                this.author,
                this.attachments,
                this.url,
                this.redacted);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        IdStage type(@NotNull Type type);

        Builder from(ConversationSource other);
    }

    public interface IdStage {
        DeliveredAsStage id(@NotNull String id);
    }

    public interface DeliveredAsStage {
        SubjectStage deliveredAs(@NotNull String deliveredAs);
    }

    public interface SubjectStage {
        AuthorStage subject(@NotNull String subject);
    }

    public interface AuthorStage {
        RedactedStage author(@NotNull ConversationPartAuthor author);
    }

    public interface RedactedStage {
        _FinalStage redacted(boolean redacted);
    }

    public interface _FinalStage {
        ConversationSource build();

        _FinalStage body(Optional<String> body);

        _FinalStage body(String body);

        _FinalStage attachments(Optional<List<PartAttachment>> attachments);

        _FinalStage attachments(List<PartAttachment> attachments);

        _FinalStage url(Optional<String> url);

        _FinalStage url(String url);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TypeStage, IdStage, DeliveredAsStage, SubjectStage, AuthorStage, RedactedStage, _FinalStage {
        private Type type;

        private String id;

        private String deliveredAs;

        private String subject;

        private ConversationPartAuthor author;

        private boolean redacted;

        private Optional<String> url = Optional.empty();

        private Optional<List<PartAttachment>> attachments = Optional.empty();

        private Optional<String> body = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ConversationSource other) {
            type(other.getType());
            id(other.getId());
            deliveredAs(other.getDeliveredAs());
            subject(other.getSubject());
            body(other.getBody());
            author(other.getAuthor());
            attachments(other.getAttachments());
            url(other.getUrl());
            redacted(other.getRedacted());
            return this;
        }

        /**
         * <p>This includes conversation, email, facebook, instagram, phone_call, phone_switch, push, sms, twitter and whatsapp.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public IdStage type(@NotNull Type type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The id representing the message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public DeliveredAsStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The conversation's initiation type. Possible values are customer_initiated, campaigns_initiated (legacy campaigns), operator_initiated (Custom bot), automated (Series and other outbounds with dynamic audience message) and admin_initiated (fixed audience message, ticket initiated by an admin, group email).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("delivered_as")
        public SubjectStage deliveredAs(@NotNull String deliveredAs) {
            this.deliveredAs = Objects.requireNonNull(deliveredAs, "deliveredAs must not be null");
            return this;
        }

        /**
         * <p>Optional. The message subject. For Twitter, this will show a generic message regarding why the subject is obscured.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("subject")
        public AuthorStage subject(@NotNull String subject) {
            this.subject = Objects.requireNonNull(subject, "subject must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("author")
        public RedactedStage author(@NotNull ConversationPartAuthor author) {
            this.author = Objects.requireNonNull(author, "author must not be null");
            return this;
        }

        /**
         * <p>Whether or not the source message has been redacted. Only applicable for contact initiated messages.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("redacted")
        public _FinalStage redacted(boolean redacted) {
            this.redacted = redacted;
            return this;
        }

        /**
         * <p>The URL where the conversation was started. For Twitter, Email, and Bots, this will be blank.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public _FinalStage url(Optional<String> url) {
            this.url = url;
            return this;
        }

        /**
         * <p>A list of attachments for the part.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage attachments(List<PartAttachment> attachments) {
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public _FinalStage attachments(Optional<List<PartAttachment>> attachments) {
            this.attachments = attachments;
            return this;
        }

        /**
         * <p>The message body, which may contain HTML. For Twitter, this will show a generic message regarding why the body is obscured.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage body(String body) {
            this.body = Optional.ofNullable(body);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "body", nulls = Nulls.SKIP)
        public _FinalStage body(Optional<String> body) {
            this.body = body;
            return this;
        }

        @java.lang.Override
        public ConversationSource build() {
            return new ConversationSource(
                    type, id, deliveredAs, subject, body, author, attachments, url, redacted, additionalProperties);
        }
    }

    public enum Type {
        CONVERSATION("conversation"),

        EMAIL("email"),

        FACEBOOK("facebook"),

        INSTAGRAM("instagram"),

        PHONE_CALL("phone_call"),

        PHONE_SWITCH("phone_switch"),

        PUSH("push"),

        SMS("sms"),

        TWITTER("twitter"),

        WHATSAPP("whatsapp");

        private final String value;

        Type(String value) {
            this.value = value;
        }

        @JsonValue
        @java.lang.Override
        public String toString() {
            return this.value;
        }
    }
}
