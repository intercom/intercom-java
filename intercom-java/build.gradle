import java.text.SimpleDateFormat

final publicationVersion = new Version(version)
def rawVersion = version

group = 'io.intercom'
version = publicationVersion
status = version.status

ext {
  mvnUser = System.getenv('MVN_REPO_USER') ?: "dev"
  mvnPass = System.getenv('MVN_REPO_PASS') ?: "dev"
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar, javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourcesJar {
        classifier "sources"
      }

      artifact javadocJar {
        classifier "javadoc"
      }
    }
  }
}

signing {
    if (project.hasProperty('signing.keyId') && project.hasProperty('signing.secretKeyRingFile')) {
      sign configurations.archives
    }
}

task printVersion {
  doLast {
    println "publication version: ${publicationVersion}"
    println "raw version: ${rawVersion}"
  }
}

uploadArchives {
  repositories.mavenDeployer {
    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
      authentication(userName: mvnUser, password: mvnPass)
    }

    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
      authentication(userName: mvnUser, password: mvnPass)
    }

    pom.project {
      name 'intercom-java'
      artifactId 'intercom-java'
      packaging 'jar'
      description 'Java bindings for the Intercom API'
      url 'https://github.com/intercom/intercom-java'

      licenses {
        license {
          name 'The Apache License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
      }
    }
  }
}

/**
 * A version object for use in the publication and tagging tasks.
 * If the version ends with SNAPSHOT, that will be replaced with a timestamp.
 *
 * Based on https://github.com/bintray/bintray-examples
 */
class Version {
  //
  String originalVersion
  String thisVersion
  String status
  Date buildTime

  Version(String versionValue) {
    buildTime = new Date()
    originalVersion = versionValue
    if (originalVersion.endsWith('-SNAPSHOT')) {
      status = 'integration'
      thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
    } else {
      status = 'release'
      thisVersion = versionValue
    }
  }

  String getTimestamp() {
    // Convert local file timestamp to UTC
    def format = new SimpleDateFormat('yyyyMMddHHmmss')
    format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
    return format.format(buildTime)
  }

  String toString() {
    thisVersion
  }
}
